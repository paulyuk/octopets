name: Deploy with AZD and OIDC

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

# Required permissions for OIDC
permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install azd
      uses: Azure/setup-azd@v1.0.0

    - name: Log in with Azure (OIDC)
      uses: Azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Deploy with azd
      shell: bash
      run: |
        # Set environment variables
        export AZURE_ENV_NAME="${{ vars.AZURE_ENV_NAME || 'dev' }}"
        export AZURE_LOCATION="${{ vars.AZURE_LOCATION || 'eastus2' }}"
        export AZURE_SUBSCRIPTION_ID="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        
        echo "🚀 Starting deployment with azd..."
        echo "Environment: $AZURE_ENV_NAME"
        echo "Location: $AZURE_LOCATION"
        
        # Initialize azd environment if it doesn't exist
        if ! azd env select $AZURE_ENV_NAME 2>/dev/null; then
          echo "📦 Creating new azd environment: $AZURE_ENV_NAME"
          azd env new $AZURE_ENV_NAME --location $AZURE_LOCATION --subscription $AZURE_SUBSCRIPTION_ID
        fi
        
        # Deploy the application
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "🔍 PR detected - running provision with preview"
          azd provision --preview
        else
          echo "🚀 Main branch - deploying application"
          azd up --no-prompt
        fi

    - name: Get deployment outputs
      if: github.event_name != 'pull_request'
      shell: bash
      run: |
        echo "📋 Getting deployment information..."
        azd show --output table || true
        
        # Try to get endpoint
        ENDPOINT=$(azd show --output json 2>/dev/null | jq -r '.services | to_entries | .[0].value.endpoint // empty' || echo "")
        if [ -n "$ENDPOINT" ]; then
          echo "🌐 Application deployed to: $ENDPOINT"
          echo "ENDPOINT=$ENDPOINT" >> $GITHUB_OUTPUT
        fi

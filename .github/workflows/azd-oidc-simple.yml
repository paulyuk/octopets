on:
  workflow_dispatch:

# Required permissions for OIDC
permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install azd
        uses: Azure/setup-azd@v2

      - name: Configure Azure CLI authentication
        shell: bash
        run: |
          echo "🔑 Setting up Azure CLI authentication..."
          export AZURE_CLIENT_ID="${{ vars.AZURE_CLIENT_ID }}"
          export AZURE_TENANT_ID="${{ vars.AZURE_TENANT_ID }}"
          export AZURE_SUBSCRIPTION_ID="${{ vars.AZURE_SUBSCRIPTION_ID }}"
          
          # Display last 4 characters of client ID for debugging
          if [[ -n "$AZURE_CLIENT_ID" ]]; then
            CLIENT_ID_LENGTH=${#AZURE_CLIENT_ID}
            LAST_FOUR=${AZURE_CLIENT_ID:$CLIENT_ID_LENGTH-4:4}
            echo "🔑 Using client ID ending with: $LAST_FOUR"
          else
            echo "⚠️ Client ID is not set"
          fi

      # - name: Log in with Azure (OIDC)
      #   uses: azure/login@v2
      #   with:
      #     client-id: ${{ vars.AZURE_CLIENT_ID }}
      #     tenant-id: ${{ vars.AZURE_TENANT_ID }}
      #     subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      # - name: Configure AZD for Azure CLI authentication
      #   shell: bash
      #   run: |
      #     echo "🔑 Setting up AZD to use Azure CLI authentication..."
      #     export AZURE_CLIENT_ID="${{ vars.AZURE_CLIENT_ID }}"
      #     export AZURE_TENANT_ID="${{ vars.AZURE_TENANT_ID }}"
      #     export AZURE_SUBSCRIPTION_ID="${{ vars.AZURE_SUBSCRIPTION_ID }}"
      #     mkdir -p ~/.azd
      #     echo '{"defaults":{"auth":{"useAzureCli":true}}}' > ~/.azd/config.json
      #     cat ~/.azd/config.json
      #     echo "✅ AZD configured to use Azure CLI authentication"

      - name: Deploy with azd
        shell: bash
        run: |
          export AZURE_ENV_NAME="${{ github.event.inputs.environment || 'dev' }}"
          export AZURE_LOCATION="${{ vars.AZURE_LOCATION || 'eastus2' }}"
          export AZURE_SUBSCRIPTION_ID="${{ vars.AZURE_SUBSCRIPTION_ID }}"
          export AZURE_CLIENT_ID="${{ vars.AZURE_CLIENT_ID }}"
          export AZURE_TENANT_ID="${{ vars.AZURE_TENANT_ID }}"

          echo "🔍 Diagnostic information:"
          echo "AZD version: $(azd version)"
          echo "Current OIDC token: $(if [[ -n $ACTIONS_ID_TOKEN_REQUEST_TOKEN ]]; then echo 'Present'; else echo 'Not found'; fi)"

          echo "🚀 Starting deployment with azd..."
          echo "Environment: $AZURE_ENV_NAME"
          echo "Location: $AZURE_LOCATION"

          azd auth login --client-id $AZURE_CLIENT_ID --federated-credential-provider github --tenant-id $AZURE_TENANT_ID --no-browser
          if ! az account show &>/dev/null; then
            echo "❌ Azure CLI is not logged in. The Azure/login action should have handled this."
            exit 1
          fi

          echo "🔍 Changing working directory to ./apphost ..."
          pwd
          cd apphost
          pwd

          if ! azd env select $AZURE_ENV_NAME 2>/dev/null; then
            echo "📦 Creating new azd environment: $AZURE_ENV_NAME"
            azd env new $AZURE_ENV_NAME --location $AZURE_LOCATION --subscription $AZURE_SUBSCRIPTION_ID
          fi

          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "🔍 PR detected - running provision with preview"
            azd provision --preview
          else
            echo "🚀 Main branch - deploying application"
            azd up --no-prompt
          fi

      - name: Get deployment outputs
        if: github.event_name != 'pull_request'
        shell: bash
        run: |
          echo "📋 Getting deployment information..."
          azd show --output table || true

          ENDPOINT=$(azd show --output json 2>/dev/null | jq -r '.services | to_entries](#)

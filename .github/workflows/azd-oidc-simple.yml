name: Deploy with AZD and OIDC

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Required permissions for OIDC
permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
      DOTNET_CORE_VERSION: 9.0.x
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
 
      - name: Install azd
        uses: Azure/setup-azd@v2

      - name: Configure Azure CLI authentication
        shell: bash
        run: |
          echo "🔑 Setting up Azure CLI authentication..."
          export AZURE_CLIENT_ID="${{ vars.AZURE_CLIENT_ID }}"
          export AZURE_TENANT_ID="${{ vars.AZURE_TENANT_ID }}"
          export AZURE_SUBSCRIPTION_ID="${{ vars.AZURE_SUBSCRIPTION_ID }}"
          
          # Display last 4 characters of client ID for debugging
          if [[ -n "$AZURE_CLIENT_ID" ]]; then
            CLIENT_ID_LENGTH=${#AZURE_CLIENT_ID}
            LAST_FOUR=${AZURE_CLIENT_ID:$CLIENT_ID_LENGTH-4:4}
            echo "🔑 Using client ID ending with: $LAST_FOUR"
          else
            echo "⚠️ Client ID is not set"
          fi

      - name: Set Docker Image Tag Environment Variable
        run: |
          # Using a descriptive tag that combines branch, run number, and short SHA
          # This is the best practice for traceability and immutability.
          COMMIT_SHA_SHORT=${GITHUB_SHA::7}
          IMAGE_TAG="${{ github.ref_name }}-${{ github.run_number }}-${COMMIT_SHA_SHORT}"

          echo "AZURE_CONTAINER_IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          echo "Generated image tag: ${IMAGE_TAG}"

      - name: Deploy with azd
        shell: bash
        run: |
          export AZURE_ENV_NAME=${{ vars.AZURE_ENV_NAME || 'octopets' }}
          export AZURE_LOCATION="${{ vars.AZURE_LOCATION || 'eastus2' }}"
          export AZURE_SUBSCRIPTION_ID="${{ vars.AZURE_SUBSCRIPTION_ID }}"
          export AZURE_CLIENT_ID="${{ vars.AZURE_CLIENT_ID }}"
          export AZURE_TENANT_ID="${{ vars.AZURE_TENANT_ID }}"

          echo "🔍 Diagnostic information:"
          echo "AZD version: $(azd version)"
          echo "Current OIDC token: $(if [[ -n $ACTIONS_ID_TOKEN_REQUEST_TOKEN ]]; then echo 'Present'; else echo 'Not found'; fi)"

          echo "🚀 Starting deployment with azd..."
          echo "Environment: $AZURE_ENV_NAME"
          echo "Location: $AZURE_LOCATION"

          azd auth login --client-id $AZURE_CLIENT_ID --federated-credential-provider github --tenant-id $AZURE_TENANT_ID

          echo "🔍 Changing working directory to ./apphost ..."
          pwd
          cd apphost
          pwd

          if ! azd env select $AZURE_ENV_NAME 2>/dev/null; then
            echo "📦 Creating new azd environment: $AZURE_ENV_NAME"
            azd env new $AZURE_ENV_NAME --location $AZURE_LOCATION --subscription $AZURE_SUBSCRIPTION_ID
          fi

          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "🔍 PR detected - running provision with preview"
            azd provision --preview
          else
            echo "🚀 Main branch - deploying application"
            azd up --no-prompt
          fi

      - name: Get deployment outputs
        if: github.event_name != 'pull_request'
        shell: bash
        run: |
          echo "📋 Getting deployment information..."
          azd show --output table || true
